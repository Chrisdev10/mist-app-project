AUTH SERVICE - REST API
=======================

BASE_URL: http://localhost:8181/auth

DONE -- no auth:       POST   - /sign-in          --> public String signIn(@RequestBody SignInForm form) (returns a JWT)
DONE -- no auth:       POST   - /sign-up          --> public String signUp(@RequestBody SignUpForm form) (returns a JWT) ** // sign up and login
DONE -- authenticated: GET    - /authenticate     --> public SimpleUserAccountDTO getUserRoles(Authentication auth)
DONE -- authenticated: GET    - /account          --> public UserAccountDTO getUserAccount(Authentication auth)
DONE -- authenticated: PUT    - /update           --> public void updateUserAccount(@RequestBody SignUpForm form) **
DONE -- admin:         PATCH  - /toggle           --> public void toggleUserAccount(@RequestParam UUID ref) // update 'active' boolean to false/true

-----------------------------
SimpleUserAccountDTO:
 - ref: UUID
 - roles: List<String>

-----------------------------
UserAccountDTO:
 - ref: UUID
 - username: String
 - password: String
 - email: String
 
 
///////////////////////////
 
USER SERVICE - REST API
=======================

BASE_URL: http://localhost:8585/user

TODO -- RabbitMQ  - authQueue                           --> public void createUser(UserForm form) **
TODO -- authenticated: PUT    - /update                 --> public void updateUserInfo(Authentication auth, @RequestBody UserForm form) **
TODO -- authenticated: GET    - /details                --> public UserDTO getUserInfo(Authentication auth) // auth.getPrincipal() should return the user ref (UUID)
TODO -- authenticated: GET    - /billing-address        --> public List<BillingAddressDTO> getUserBillingAddresses(Authentication auth)
TODO -- authenticated: POST   - /billing-address/add    --> public void addBillingAddress(Authentication auth, @RequestBody BillingAddressForm form)
TODO -- authenticated: DELETE - /billing-address/delete --> public void deleteBillingAddress(Authentication auth, @RequestParam Long addressId)
TODO -- authenticated: GET    - /wishlist               --> public List<GameDTO> getUserWishlist(Authentication auth)
TODO -- authenticated: POST   - /wishlist/add           --> public void addGameToWishlist(Authentication auth, @RequestBody GameForm form)
TODO -- authenticated: DELETE - /wishlist/delete        --> public void deleteGameFromWishlist(Authentication auth, @RequestParam UUID gameRef)


//////////////////////////

**: communication from auth-service to user-service with RabbitMQ




